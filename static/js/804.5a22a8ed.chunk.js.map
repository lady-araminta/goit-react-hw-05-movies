{"version":3,"file":"static/js/804.5a22a8ed.chunk.js","mappings":"sNA8EA,UAxEqB,WAAO,IAAD,IACzB,GAAwBA,EAAAA,EAAAA,UAAS,CAAC,GAAlC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,KAE7CC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBP,GACfQ,MAAK,SAAAd,GACJC,EAAQD,GACR,IAAME,EAAY,GAClBF,EAAKe,OAAOC,SAAQ,gBAAGC,EAAH,EAAGA,KAAH,OAAcf,EAAUgB,KAAKD,EAA7B,IACpBd,EAAaD,GACbG,GAAW,EACZ,IACAc,OAAM,SAAAC,GAEL,OADAf,GAAW,IACJgB,EAAAA,EAAAA,IAAM,sCACd,GACJ,GAAE,CAACf,IAEJ,IAAMgB,EAAc,IAAIC,KAAKvB,EAAKwB,cAElC,OACE,4BACE,SAAC,KAAD,CAAMC,GAAIjB,EAAV,qBACCR,IAASI,IACR,iCACE,4BACE,gBACEsB,IACE1B,EAAK2B,YAAL,UACOC,EAAAA,IADP,OACwB5B,EAAK2B,aACzB,kCAENE,IAAK7B,EAAK8B,MACVC,MAAM,SAER,4BACE,0BACG/B,EAAK8B,MADR,KACiBR,EAAYU,cAD7B,QAGA,wCACA,sCACA,uBAAIhC,EAAKiC,YACT,oCACA,uBAAI/B,EAAUgC,KAAK,eAGvB,2BACE,yBACE,SAAC,KAAD,CAAMT,GAAG,OAAOf,MAAO,CAAEC,KAAMH,GAA/B,qBAIF,yBACE,SAAC,KAAD,CAAMiB,GAAG,UAAUf,MAAO,CAAEC,KAAMH,GAAlC,2BAKJ,SAAC,EAAA2B,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC,KAAD,WAMX,C,8KC5ED,IAAMC,EAAU,mCACVC,EAAW,gCACJV,EAAiB,kCAEjBW,EAAsB,WACjC,OAAOC,MAAM,GAAD,OAAIF,EAAJ,sCAA0CD,IAAWvB,MAC/D,SAAA2B,GACE,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,sCACjC,GAEJ,EAEYC,EAAoB,SAAAC,GAC/B,OAAOR,MAAM,GAAD,OACPF,EADO,gCACyBD,EADzB,kBAC0CW,EAD1C,gCAEVlC,MAAK,SAAA2B,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,sCACjC,GACF,EAEYjC,EAAoB,SAAAP,GAC/B,OAAOkC,MAAM,GAAD,OAAIF,EAAJ,iBAAqBhC,EAArB,oBAAwC+B,IAAWvB,MAC7D,SAAA2B,GACE,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,sCACjC,GAEJ,EAEYG,EAAiB,SAAA3C,GAC5B,OAAOkC,MAAM,GAAD,OAAIF,EAAJ,iBAAqBhC,EAArB,4BAAgD+B,IAAWvB,MACrE,SAAA2B,GACE,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,sCACjC,GAEJ,EAEYI,EAAoB,SAAA5C,GAC/B,OAAOkC,MAAM,GAAD,OAAIF,EAAJ,iBAAqBhC,EAArB,4BAAgD+B,IAAWvB,MACrE,SAAA2B,GACE,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,sCACjC,GAEJ,C","sources":["pages/MovieDetails/MovieDetails.js","utils/api.js"],"sourcesContent":["import { fetchMovieDetails, BASE_IMAGE_URL } from 'utils/api';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { Suspense, useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const [info, setInfo] = useState({});\n  const [genreList, setGenreList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    fetchMovieDetails(movieId)\n      .then(info => {\n        setInfo(info);\n        const genreList = [];\n        info.genres.forEach(({ name }) => genreList.push(name));\n        setGenreList(genreList);\n        setLoading(false);\n      })\n      .catch(error => {\n        setLoading(false);\n        return toast('Something went wrong! Please retry!');\n      });\n  }, [movieId]);\n\n  const releaseYear = new Date(info.release_date);\n\n  return (\n    <div>\n      <Link to={backLinkHref}>Go back</Link>\n      {info && !loading && (\n        <>\n          <div>\n            <img\n              src={\n                info.poster_path\n                  ? `${BASE_IMAGE_URL}${info.poster_path}`\n                  : 'https://i.imgur.com/brJrHsa.jpg'\n              }\n              alt={info.title}\n              width=\"320\"\n            />\n            <div>\n              <h3>\n                {info.title} ({releaseYear.getFullYear()})\n              </h3>\n              <p>User score:</p>\n              <h5>Overview</h5>\n              <p>{info.overview}</p>\n              <h5>Genres</h5>\n              <p>{genreList.join(', ')}</p>\n            </div>\n          </div>\n          <ul>\n            <li>\n              <Link to=\"cast\" state={{ from: backLinkHref }}>\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link to=\"reviews\" state={{ from: backLinkHref }}>\n                Reviews\n              </Link>\n            </li>\n          </ul>\n          <Suspense fallback={<Loader />}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","const API_KEY = 'b59a60e3d4b462ae9c6c6d62e7fdcb56';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nexport const BASE_IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const fetchTrendingMovies = () => {\n  return fetch(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`).then(\n    response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error('Something went wrong! Please retry'));\n    }\n  );\n};\n\nexport const fetchMoviesByName = query => {\n  return fetch(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=1&include_adult=false`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error('Something went wrong! Please retry'));\n  });\n};\n\nexport const fetchMovieDetails = movieId => {\n  return fetch(`${BASE_URL}movie/${movieId}?api_key=${API_KEY}`).then(\n    response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error('Something went wrong! Please retry'));\n    }\n  );\n};\n\nexport const fetchMovieCast = movieId => {\n  return fetch(`${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`).then(\n    response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error('Something went wrong! Please retry'));\n    }\n  );\n};\n\nexport const fetchMovieReviews = movieId => {\n  return fetch(`${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`).then(\n    response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error('Something went wrong! Please retry'));\n    }\n  );\n};\n"],"names":["useState","info","setInfo","genreList","setGenreList","loading","setLoading","movieId","useParams","backLinkHref","useLocation","state","from","useEffect","fetchMovieDetails","then","genres","forEach","name","push","catch","error","toast","releaseYear","Date","release_date","to","src","poster_path","BASE_IMAGE_URL","alt","title","width","getFullYear","overview","join","Suspense","fallback","API_KEY","BASE_URL","fetchTrendingMovies","fetch","response","ok","json","Promise","reject","Error","fetchMoviesByName","query","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}